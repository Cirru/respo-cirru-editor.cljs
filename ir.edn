{:package "cirru-editor",
 :root {:ns "main", :def "main!"},
 :files {"comp.expression" {:ns ["ns"
                                 "cirru-editor.comp.expression"
                                 [":require"
                                  ["[]" "hsl.core" ":refer" ["[]" "hsl"]]
                                  ["[]" "respo.alias" ":refer" ["[]" "create-comp" "div"]]
                                  ["[]" "respo.cursor" ":refer" ["[]" "with-cursor"]]
                                  ["[]" "respo.comp.text" ":refer" ["[]" "comp-text"]]
                                  ["[]" "respo.comp.space" ":refer" ["[]" "comp-space"]]
                                  ["[]" "respo.comp.debug" ":refer" ["[]" "comp-debug"]]
                                  ["[]" "cirru-editor.comp.token" ":refer" ["[]" "comp-token"]]
                                  ["[]" "cirru-editor.util.detect" ":refer" ["[]" "coord-contains?" "shallow?" "deep?"]]
                                  ["[]" "cirru-editor.util.keycode" ":as" "keycode"]]],
                            :defs {"style-folded" ["def"
                                                   "style-folded"
                                                   ["{}"
                                                    [":display" "|inline-block"]
                                                    [":color" ["hsl" "180" "80" "60"]]
                                                    [":font-family" "|Source Code Pro,Menlo,monospace"]
                                                    [":font-size" "|15px"]
                                                    [":outline" "|none"]
                                                    [":border-width" "|1px"]
                                                    [":border-style" "|solid"]
                                                    [":border-color" ["hsl" "0" "0" "100" "0.5"]]
                                                    [":padding-left" "16"]
                                                    [":padding-right" "16"]
                                                    [":vertical-align" "|top"]
                                                    [":line-height" "|27px"]
                                                    [":border-radius" "|16px"]
                                                    [":cursor" "|pointer"]
                                                    [":margin-bottom" "|4px"]]],
                                   "on-click" ["defn"
                                               "on-click"
                                               ["modify!" "coord" "focus"]
                                               ["fn"
                                                ["e" "dispatch!"]
                                                ["if"
                                                 ["not=" "coord" "focus"]
                                                 ["modify!" ":focus-to" "coord" "dispatch!"]]]],
                                   "on-unfold" ["defn"
                                                "on-unfold"
                                                ["cursor" "state"]
                                                ["fn"
                                                 ["e" "dispatch!"]
                                                 ["dispatch!" ":states" ["[]" "cursor" ["not" "state"]]]]],
                                   "on-keydown" ["defn"
                                                 "on-keydown"
                                                 ["cursor" "state" "modify!" "coord" "on-command"]
                                                 ["fn"
                                                  ["e" "dispatch!"]
                                                  ["let"
                                                   [["code" [":key-code" "e"]]
                                                    ["event" [":original-event" "e"]]
                                                    ["shift?" [".-shiftKey" "event"]]
                                                    ["command?" ["or" [".-metaKey" "event"] [".-ctrlKey" "event"]]]]
                                                   ["cond"
                                                    [["=" "code" "keycode/space"]
                                                     ["do"
                                                      [".preventDefault" "event"]
                                                      ["if"
                                                       "shift?"
                                                       ["modify!" ":before-token" "coord" "dispatch!"]
                                                       ["modify!" ":after-token" "coord" "dispatch!"]]]]
                                                    [["=" "code" "keycode/tab"]
                                                     ["do"
                                                      [".preventDefault" "event"]
                                                      ["if"
                                                       "shift?"
                                                       ["modify!" ":unfold-expression" "coord" "dispatch!"]
                                                       ["modify!" ":fold-node" "coord" "dispatch!" "dispatch!"]]]]
                                                    [["=" "code" "keycode/enter"]
                                                     ["if"
                                                      "command?"
                                                      ["if"
                                                       "shift?"
                                                       ["modify!" ":append-expression" "coord" "dispatch!"]
                                                       ["modify!" ":prepend-expression" "coord" "dispatch!"]]
                                                      ["if"
                                                       "shift?"
                                                       ["modify!" ":before-expression" "coord" "dispatch!"]
                                                       ["modify!" ":after-expression" "coord" "dispatch!"]]]]
                                                    [["=" "code" "keycode/backspace"]
                                                     ["do"
                                                      [".preventDefault" "event"]
                                                      ["modify!" ":remove-node" "coord" "dispatch!"]]]
                                                    [["=" "code" "keycode/left"]
                                                     ["do"
                                                      [".preventDefault" "event"]
                                                      ["modify!" ":node-left" "coord" "dispatch!"]]]
                                                    [["=" "code" "keycode/right"]
                                                     ["do"
                                                      [".preventDefault" "event"]
                                                      ["modify!" ":node-right" "coord" "dispatch!"]]]
                                                    [["=" "code" "keycode/up"]
                                                     ["do"
                                                      [".preventDefault" "event"]
                                                      ["modify!" ":node-up" "coord" "dispatch!"]]]
                                                    [["=" "code" "keycode/down"]
                                                     ["do"
                                                      [".preventDefault" "event"]
                                                      ["modify!" ":expression-down" "coord" "dispatch!"]]]
                                                    [["and" "command?" ["=" "code" "keycode/key-b"]]
                                                     ["do"
                                                      [".preventDefault" "event"]
                                                      ["modify!" ":duplicate-expression" "coord" "dispatch!"]]]
                                                    [["and" "command?" ["=" "code" "keycode/key-c"]]
                                                     ["modify!" ":command-copy" "coord" "dispatch!"]]
                                                    [["and" "command?" ["=" "code" "keycode/key-x"]]
                                                     ["modify!" ":command-cut" "coord" "dispatch!"]]
                                                    [["and" "command?" ["=" "code" "keycode/key-v"]]
                                                     ["modify!" ":command-paste" "coord" "dispatch!"]]
                                                    [["and" "command?" "shift?" ["=" "code" "keycode/key-f"]]
                                                     ["dispatch!" ":states" ["[]" "cursor" ["not" "state"]]]]
                                                    [":else" ["if" "command?" ["on-command" "e" "dispatch!"] "nil"]]]]]],
                                   "comp-expression" ["def"
                                                      "comp-expression"
                                                      ["create-comp"
                                                       ":expression"
                                                       ["fn"
                                                        ["states"
                                                         "expression"
                                                         "modify!"
                                                         "coord"
                                                         "level"
                                                         "tail?"
                                                         "focus"
                                                         "on-command"
                                                         "head?"
                                                         "after-expression?"]
                                                        ["fn"
                                                         ["cursor"]
                                                         ["let"
                                                          [["exp-size" ["count" "expression"]]
                                                           ["state" ["or" [":data" "states"] "false"]]]
                                                          ["if"
                                                           "state"
                                                           ["div"
                                                            ["{}"
                                                             [":style" "style-folded"]
                                                             [":event"
                                                              ["{}"
                                                               [":click" ["on-unfold" "cursor" "state"]]
                                                               [":keydown"
                                                                ["on-keydown"
                                                                 "cursor"
                                                                 "state"
                                                                 "modify!"
                                                                 "coord"
                                                                 "on-command"]]]]]
                                                            ["comp-text" ["first" "expression"] "nil"]]
                                                           ["div"
                                                            ["{}"
                                                             [":style"
                                                              ["merge"
                                                               ["{}"]
                                                               ["if"
                                                                ["and"
                                                                 ["shallow?" "expression"]
                                                                 ["not" "after-expression?"]
                                                                 ["not" "tail?"]
                                                                 ["pos?" "level"]
                                                                 ["<" ["count" "expression"] "5"]]
                                                                ["{}"
                                                                 [":display" "|inline-block"]
                                                                 [":border-width" "|0 0 1px 0"]
                                                                 [":padding-left" "17"]
                                                                 [":padding-right" "15"]
                                                                 [":padding-bottom" "2"]
                                                                 [":margin-left" "4"]
                                                                 [":margin-right" "4"]
                                                                 [":text-align" "|center"]
                                                                 [":background-color" ["hsl" "200" "80" "80" "0"]]]]
                                                               ["if"
                                                                ["and" "tail?" ["not" "head?"] ["pos?" "level"]]
                                                                ["{}"
                                                                 [":display" "|inline-block"]
                                                                 [":border-width" "|0 0 0 1px"]
                                                                 [":background-color" ["hsl" "0" "80" "80" "0"]]]]
                                                               ["if"
                                                                ["=" "coord" "focus"]
                                                                ["{}" [":border-color" ["hsl" "0" "0" "100" "0.6"]]]]]]
                                                             [":attrs"
                                                              ["merge"
                                                               ["{}"
                                                                [":tab-index" "0"]
                                                                [":class-name" "|cirru-expression"]]
                                                               ["if"
                                                                ["=" "coord" "focus"]
                                                                ["{}" [":id" "|editor-focused"]]]]]
                                                             [":event"
                                                              ["{}"
                                                               [":click" ["on-click" "modify!" "coord" "focus"]]
                                                               [":keydown"
                                                                ["on-keydown"
                                                                 "cursor"
                                                                 "state"
                                                                 "modify!"
                                                                 "coord"
                                                                 "on-command"]]]]]
                                                            ["loop"
                                                             ["[]"
                                                              "acc"
                                                              ["[]"]
                                                              "idx"
                                                              "0"
                                                              "expr"
                                                              "expression"
                                                              "child-after-expression?"
                                                              "false"]
                                                             ["if"
                                                              ["empty?" "expr"]
                                                              "acc"
                                                              ["let"
                                                               [["item" ["first" "expr"]]
                                                                ["pair"
                                                                 ["[]"
                                                                  "idx"
                                                                  ["let"
                                                                   [["child-coord" ["conj" "coord" "idx"]]
                                                                    ["child-focus"
                                                                     ["if"
                                                                      ["coord-contains?" "focus" "child-coord"]
                                                                      "focus"
                                                                      "nil"]]
                                                                    ["child-head?" ["zero?" "idx"]]]
                                                                   ["if"
                                                                    ["string?" "item"]
                                                                    ["comp-token"
                                                                     "item"
                                                                     "modify!"
                                                                     "child-coord"
                                                                     "child-focus"
                                                                     "on-command"
                                                                     "child-head?"]
                                                                    ["let"
                                                                     [["child-states" ["get" "states" "idx"]]]
                                                                     ["with-cursor"
                                                                      "idx"
                                                                      ["comp-expression"
                                                                       "child-states"
                                                                       "item"
                                                                       "modify!"
                                                                       "child-coord"
                                                                       ["inc" "level"]
                                                                       ["and"
                                                                        ["or" "after-expression?" ["not" "tail?"]]
                                                                        ["=" ["dec" "exp-size"] "idx"]]
                                                                       "child-focus"
                                                                       "on-command"
                                                                       "child-head?"
                                                                       "child-after-expression?"]]]]]]]
                                                                ["next-acc" ["conj" "acc" "pair"]]]
                                                               ["recur"
                                                                "next-acc"
                                                                ["inc" "idx"]
                                                                ["rest" "expr"]
                                                                ["vector?" "item"]]]]]]]]]]]],
                                   "style-expression" ["def"
                                                       "style-expression"
                                                       ["{}"
                                                        [":border-style" "|solid"]
                                                        [":border-color" ["hsl" "0" "0" "32" "0.9"]]
                                                        [":outline" "|none"]
                                                        [":padding-left" "8"]
                                                        [":padding-right" "0"]
                                                        [":padding-top" "2"]
                                                        [":padding-bottom" "0"]
                                                        [":margin-left" "12"]
                                                        [":margin-right" "0"]
                                                        [":margin-top" "0"]
                                                        [":margin-bottom" "4"]
                                                        [":border-width" "|0 0 0 1px"]
                                                        [":min-height" "|26px"]
                                                        [":min-width" "|16px"]
                                                        [":vertical-align" "|top"]
                                                        [":box-sizing" "|border-box"]]]},
                            :procs []},
         "util.keycode" {:ns ["ns" "cirru-editor.util.keycode"],
                         :defs {"space" ["def" "space" "32"],
                                "tab" ["def" "tab" "9"],
                                "right" ["def" "right" "39"],
                                "up" ["def" "up" "38"],
                                "key-s" ["def" "key-s" "83"],
                                "key-v" ["def" "key-v" "86"],
                                "backspace" ["def" "backspace" "8"],
                                "key-c" ["def" "key-c" "67"],
                                "key-x" ["def" "key-x" "88"],
                                "down" ["def" "down" "40"],
                                "key-b" ["def" "key-b" "66"],
                                "enter" ["def" "enter" "13"],
                                "key-f" ["def" "key-f" "70"],
                                "left" ["def" "left" "37"]},
                         :procs []},
         "schema" {:ns ["ns" "cirru-editor.schema"],
                   :defs {"store" ["def"
                                   "store"
                                   ["{}"
                                    [":tree" ["[]" ["[]" "|demo" ["[]" "|cute" ["[]" "|cute"]] "|demo"] ["[]" "|a"]]]
                                    [":focus" ["[]"]]
                                    [":clipboard" ["[]"]]]]},
                   :procs []},
         "comp.editor" {:ns ["ns"
                             "cirru-editor.comp.editor"
                             [":require"
                              ["[]" "hsl.core" ":refer" ["[]" "hsl"]]
                              ["[]" "respo.alias" ":refer" ["[]" "create-comp" "div" "style"]]
                              ["[]" "respo.comp.debug" ":refer" ["[]" "comp-debug"]]
                              ["[]" "respo.comp.space" ":refer" ["[]" "comp-space"]]
                              ["[]" "respo.comp.text" ":refer" ["[]" "comp-text"]]
                              ["[]" "cirru-editor.modifier.core" ":refer" ["[]" "updater"]]
                              ["[]" "cirru-editor.comp.expression" ":refer" ["[]" "comp-expression" "style-expression"]]
                              ["[]" "cirru-editor.comp.token" ":refer" ["[]" "style-token"]]
                              ["[]" "respo.render.html" ":refer" ["[]" "style->string"]]]],
                        :defs {"comp-editor" ["def"
                                              "comp-editor"
                                              ["create-comp"
                                               ":editor"
                                               ["fn"
                                                ["states" "snapshot" "on-update!" "on-command"]
                                                ["fn"
                                                 ["cursor"]
                                                 ["div"
                                                  ["{}" [":style" "style-editor"]]
                                                  ["style" ["{}" [":attrs" ["{}" [":innerHTML" "common-styles"]]]]]
                                                  ["div"
                                                   ["{}" [":style" "style-box"]]
                                                   ["comp-expression"
                                                    "states"
                                                    [":tree" "snapshot"]
                                                    ["handle-update" "snapshot" "on-update!"]
                                                    ["[]"]
                                                    "0"
                                                    "false"
                                                    [":focus" "snapshot"]
                                                    ["handle-command" "on-command" "snapshot"]
                                                    "true"
                                                    "false"]]
                                                  ["--" "comp-debug" "snapshot" ["{}" [":bottom" "0"] [":left" "0"]]]]]]]],
                               "handle-command" ["defn"
                                                 "handle-command"
                                                 ["on-command" "snapshot"]
                                                 ["fn" ["e" "dispatch!"] ["on-command" "snapshot" "dispatch!" "e"]]],
                               "common-styles" ["def"
                                                "common-styles"
                                                ["str"
                                                 "|.cirru-expression{"
                                                 ["style->string" "style-expression"]
                                                 "|} .cirru-token{"
                                                 ["style->string" "style-token"]
                                                 "|}"]],
                               "style-box" ["def"
                                            "style-box"
                                            ["{}" [":flex" "1"] [":overflow-y" "|auto"] [":padding" "|100px 0 200px 0"]]],
                               "style-editor" ["def"
                                               "style-editor"
                                               ["{}"
                                                [":padding" "|8px 8px 8px 8px"]
                                                [":min-height" "|200px"]
                                                [":display" "|flex"]
                                                [":flex-direction" "|column"]
                                                [":position" "|relative"]
                                                [":flex" "1"]]],
                               "handle-update" ["defn"
                                                "handle-update"
                                                ["snapshot" "on-update!"]
                                                ["fn"
                                                 ["op" "op-data" "dispatch!"]
                                                 ["on-update!" ["updater" "snapshot" "op" "op-data"] "dispatch!"]]]},
                        :procs []},
         "comp.container" {:ns ["ns"
                                "cirru-editor.comp.container"
                                [":require"
                                 ["[]" "hsl.core" ":refer" ["[]" "hsl"]]
                                 ["[]" "respo.alias" ":refer" ["[]" "create-comp" "div" "span"]]
                                 ["[]" "cirru-editor.comp.editor" ":refer" ["[]" "comp-editor"]]]],
                           :defs {"on-command" ["defn"
                                                "on-command"
                                                ["snapshot" "dispatch!" "e"]
                                                ["println" "|command" "e"]],
                                  "comp-container" ["def"
                                                    "comp-container"
                                                    ["create-comp"
                                                     ":container"
                                                     ["fn"
                                                      ["store"]
                                                      ["fn"
                                                       ["state" "mutate!"]
                                                       ["let"
                                                        [["states" [":states" "store"]]]
                                                        ["div"
                                                         ["{}"
                                                          [":style"
                                                           ["{}"
                                                            [":position" "|absolute"]
                                                            [":width" "|100%"]
                                                            [":height" "|100%"]
                                                            [":display" "|flex"]
                                                            [":flex-direction" "|column"]
                                                            [":background-color" ["hsl" "0" "0" "0"]]]]]
                                                         ["comp-editor" "states" "store" "on-update!" "on-command"]]]]]]],
                                  "on-update!" ["defn"
                                                "on-update!"
                                                ["snapshot" "dispatch!"]
                                                ["dispatch!" ":save" "snapshot"]]},
                           :procs []},
         "util.dom" {:ns ["ns" "cirru-editor.util.dom"],
                     :defs {"focus!" ["defn"
                                      "focus!"
                                      []
                                      ["js/requestAnimationFrame"
                                       ["fn"
                                        ["timestap"]
                                        ["let"
                                         [["editor-focus" [".querySelector" "js/document" "|#editor-focused"]]
                                          ["current-focus" [".-activeElement" "js/document"]]]
                                         ["if"
                                          ["some?" "editor-focus"]
                                          ["if" ["not=" "editor-focus" "current-focus"] [".focus" "editor-focus"] "nil"]
                                          ["println" "|Editor warning: cannot find focus target."]]]]]]},
                     :procs []},
         "main" {:ns ["ns"
                      "cirru-editor.main"
                      [":require"
                       ["[]" "respo.core" ":refer" ["[]" "render!" "clear-cache!" "render-element" "falsify-stage!"]]
                       ["[]" "respo.cursor" ":refer" ["[]" "mutate"]]
                       ["[]" "cirru-editor.comp.container" ":refer" ["[]" "comp-container"]]
                       ["[]" "cljs.reader" ":refer" ["[]" "read-string"]]
                       ["[]" "cirru-editor.util.dom" ":refer" ["[]" "focus!"]]
                       ["cirru-editor.schema" ":as" "schema"]]],
                 :defs {"dispatch!" ["defn"
                                     "dispatch!"
                                     ["op" "op-data"]
                                     ["--" "println" "|dispatch:" "op" "op-data"]
                                     ["case"
                                      "op"
                                      [":save" ["reset!" "*store" "op-data"]]
                                      [":states" ["swap!" "*store" "update" ":states" ["mutate" "op-data"]]]
                                      "nil"]
                                     ["reset!" "*touched" "true"]],
                        "reload!" ["defn" "reload!" [] ["clear-cache!"] ["render-app!"] ["println" "|code updated."]],
                        "render-app!" ["defn"
                                       "render-app!"
                                       []
                                       ["render!" ["comp-container" "@*store"] "mount-target" "dispatch!"]
                                       ["if" "@*touched" ["do" ["focus!"] ["reset!" "*touched" "false"]]]],
                        "main!" ["defn"
                                 "main!"
                                 []
                                 ["if"
                                  "server-rendered?"
                                  ["falsify-stage!"
                                   "mount-target"
                                   ["render-element" ["comp-container" "@*store"]]
                                   "dispatch!"]]
                                 ["render-app!"]
                                 ["add-watch" "*store" ":changes" "render-app!"]
                                 ["println" "|app started!"]],
                        "*store" ["defonce" "*store" ["atom" "schema/store"]],
                        "*touched" ["def" "*touched" ["atom" "false"]],
                        "mount-target" ["def" "mount-target" [".querySelector" "js/document" "|.app"]],
                        "server-rendered?" ["def"
                                            "server-rendered?"
                                            ["some?" [".querySelector" "js/document" "|meta#server-rendered"]]]},
                 :procs [["set!" "js/window.onload" "main!"]]},
         "comp.token" {:ns ["ns"
                            "cirru-editor.comp.token"
                            [":require"
                             ["[]" "hsl.core" ":refer" ["[]" "hsl"]]
                             ["[]" "respo.alias" ":refer" ["[]" "create-comp" "div" "input"]]
                             ["[]" "cirru-editor.util.measure" ":refer" ["[]" "text-width"]]
                             ["[]" "cirru-editor.util.detect" ":refer" ["[]" "has-blank?"]]
                             ["[]" "cirru-editor.util.keycode" ":as" "keycode"]]],
                       :defs {"on-click" ["defn"
                                          "on-click"
                                          ["modify!" "coord" "focus"]
                                          ["fn"
                                           ["e" "dispatch!"]
                                           ["if" ["not=" "coord" "focus"] ["modify!" ":focus-to" "coord" "dispatch!"]]]],
                              "style-token" ["def"
                                             "style-token"
                                             ["{}"
                                              [":border" "|none"]
                                              [":font-size" "|15px"]
                                              [":line-height" "|24px"]
                                              [":font-family" "|Source Code Pro,Menlo,monospace"]
                                              [":padding" "|0 2px"]
                                              [":margin-left" "2"]
                                              [":margin-right" "2"]
                                              [":outline" "|none"]
                                              [":max-width" "|320px"]
                                              [":background-color" ["hsl" "0" "0" "100" "0"]]
                                              [":color" ["hsl" "200" "12" "67" "0.9"]]
                                              [":text-align" "|center"]]],
                              "on-input" ["defn"
                                          "on-input"
                                          ["modify!" "coord"]
                                          ["fn"
                                           ["e" "dispatch!"]
                                           ["modify!" ":update-token" ["[]" "coord" [":value" "e"]] "dispatch!"]]],
                              "comp-token" ["def"
                                            "comp-token"
                                            ["create-comp"
                                             ":token"
                                             ["fn"
                                              ["token" "modify!" "coord" "focus" "on-command" "head?"]
                                              ["fn"
                                               ["state" "mutate!"]
                                               ["input"
                                                ["{}"
                                                 [":attrs"
                                                  ["merge"
                                                   ["{}"
                                                    [":value" "token"]
                                                    [":spellcheck" "false"]
                                                    [":class-name" "|cirru-token"]]
                                                   ["if" ["=" "coord" "focus"] ["{}" [":id" "|editor-focused"]]]]]
                                                 [":event"
                                                  ["{}"
                                                   [":input" ["on-input" "modify!" "coord"]]
                                                   [":keydown" ["on-keydown" "modify!" "coord" "token" "on-command"]]
                                                   [":click" ["on-click" "modify!" "coord" "focus"]]]]
                                                 [":style"
                                                  ["merge"
                                                   ["{}"]
                                                   ["{}"
                                                    [":width"
                                                     ["str"
                                                      ["+"
                                                       "8"
                                                       ["text-width" "token" "15" [":font-family" "style-token"]]]
                                                      "|px"]]]
                                                   ["if"
                                                    ["or" ["has-blank?" "token"] ["zero?" ["count" "token"]]]
                                                    ["{}" [":background-color" ["hsl" "0" "0" "100" "0.16"]]]]
                                                   ["if" "head?" ["{}" [":color" ["hsl" "40" "80" "60" "0.9"]]]]]]]]]]]],
                              "on-keydown" ["defn"
                                            "on-keydown"
                                            ["modify!" "coord" "token" "on-command"]
                                            ["fn"
                                             ["e" "dispatch!"]
                                             ["let"
                                              [["code" [":key-code" "e"]]
                                               ["event" [":original-event" "e"]]
                                               ["shift?" [".-shiftKey" "event"]]
                                               ["command?" ["or" [".-metaKey" "event"] [".-ctrlKey" "event"]]]
                                               ["target" [".-target" "event"]]
                                               ["at-start?" ["zero?" [".-selectionStart" "target"]]]
                                               ["at-end?" ["=" ["count" "token"] [".-selectionEnd" "target"]]]
                                               ["thin-cursor?"
                                                ["=" [".-selectionStart" "target"] [".-selectionEnd" "target"]]]]
                                              ["cond"
                                               [["and" ["=" "code" "keycode/space"] ["not" "shift?"]]
                                                ["do"
                                                 [".preventDefault" "event"]
                                                 ["modify!" ":after-token" "coord" "dispatch!"]]]
                                               [["=" "code" "keycode/tab"]
                                                ["do"
                                                 [".preventDefault" "event"]
                                                 ["if"
                                                  "shift?"
                                                  ["modify!" ":unfold-token" "coord" "dispatch!"]
                                                  ["modify!" ":fold-node" "coord" "dispatch!"]]]]
                                               [["=" "code" "keycode/enter"]
                                                ["if"
                                                 "shift?"
                                                 ["modify!" ":before-token" "coord" "dispatch!"]
                                                 ["modify!" ":after-token" "coord" "dispatch!"]]]
                                               [["=" "code" "keycode/backspace"]
                                                ["if"
                                                 ["=" "token" "|"]
                                                 ["do"
                                                  ["modify!" ":remove-node" "coord" "dispatch!"]
                                                  [".preventDefault" "event"]]]]
                                               [["=" "code" "keycode/up"]
                                                ["do"
                                                 [".preventDefault" "event"]
                                                 ["modify!" ":node-up" "coord" "dispatch!"]]]
                                               [["and" "thin-cursor?" "at-start?" ["=" "code" "keycode/left"]]
                                                ["do"
                                                 [".preventDefault" "event"]
                                                 ["modify!" ":node-left" "coord" "dispatch!"]]]
                                               [["and" "thin-cursor?" "at-end?" ["=" "code" "keycode/right"]]
                                                ["do"
                                                 [".preventDefault" "event"]
                                                 ["modify!" ":node-right" "coord" "dispatch!"]]]
                                               [["and" "shift?" "command?" ["=" "code" "keycode/key-v"]]
                                                ["do"
                                                 [".preventDefault" "event"]
                                                 ["modify!" ":command-paste" "coord" "dispatch!"]]]
                                               [":else" ["if" "command?" ["on-command" "e" "dispatch!"] "nil"]]]]]]},
                       :procs []},
         "render" {:ns ["ns"
                        "cirru-editor.render"
                        [":require"
                         ["[]"
                          "respo.alias"
                          ":refer"
                          ["[]" "html" "head" "title" "script" "style" "meta'" "div" "link" "body"]]
                         ["[]" "respo.render.html" ":refer" ["[]" "make-html" "make-string"]]
                         ["[]" "cirru-editor.comp.container" ":refer" ["[]" "comp-container"]]
                         ["[]" "|fs" ":refer" ["[]" "readFileSync" "writeFileSync"]]
                         ["cirru-editor.schema" ":as" "schema"]]],
                   :defs {"main!" ["defn"
                                   "main!"
                                   []
                                   ["if"
                                    ["=" "js/process.env.env" "|dev"]
                                    ["spit" "|target/index.html" ["generate-empty-html"]]
                                    ["spit" "|dist/index.html" ["generate-html"]]]],
                          "spit" ["defn"
                                  "spit"
                                  ["file-name" "content"]
                                  ["writeFileSync" "file-name" "content"]
                                  ["println" "|Wrote to:" "file-name"]],
                          "generate-empty-html" ["defn"
                                                 "generate-empty-html"
                                                 []
                                                 ["html-dsl"
                                                  ["{}"
                                                   [":build?" "false"]
                                                   [":main" "|/main.js"]
                                                   [":cljs-main" "|/browser/main.js"]]
                                                  "|"]],
                          "generate-html" ["defn"
                                           "generate-html"
                                           []
                                           ["let"
                                            [["tree" ["comp-container" "schema/store"]]
                                             ["html-content" ["make-string" "tree"]]
                                             ["resources"
                                              ["let"
                                               [["manifest" ["js/JSON.parse" ["slurp" "|dist/manifest.json"]]]]
                                               ["{}"
                                                [":build?" "true"]
                                                [":css" ["aget" "manifest" "|main.css"]]
                                                [":main" ["aget" "manifest" "|main.js"]]
                                                [":vendor" ["aget" "manifest" "|vendor.js"]]]]]]
                                            ["html-dsl" "resources" "html-content"]]],
                          "slurp" ["defn" "slurp" ["x"] ["readFileSync" "x" "|utf8"]],
                          "html-dsl" ["defn"
                                      "html-dsl"
                                      ["resources" "html-content"]
                                      ["make-html"
                                       ["html"
                                        ["{}"]
                                        ["head"
                                         ["{}"]
                                         ["title" ["{}" [":innerHTML" "|Cirru Editor"]]]
                                         ["link" ["{}" [":rel" "|icon"] [":type" "|image/png"] [":href" "icon-url"]]]
                                         ["link" ["{}" [":rel" "|manifest"] [":href" "|manifest.json"]]]
                                         ["meta'" ["{}" [":charset" "|utf8"]]]
                                         ["meta'"
                                          ["{}"
                                           [":name" "|viewport"]
                                           [":content" "|width=device-width, initial-scale=1"]]]
                                         ["if"
                                          [":build?" "resources"]
                                          ["meta'" ["{}" [":id" "|server-rendered"] [":type" "|text/edn"]]]]
                                         ["if"
                                          ["contains?" "resources" ":css"]
                                          ["link"
                                           ["{}"
                                            [":rel" "|stylesheet"]
                                            [":type" "|text/css"]
                                            [":href" [":css" "resources"]]]]]]
                                        ["body"
                                         ["{}"]
                                         ["div" ["{}" [":class-name" "|app"] [":innerHTML" "html-content"]]]
                                         ["if"
                                          [":build?" "resources"]
                                          ["script" ["{}" [":src" [":vendor" "resources"]]]]
                                          ["script" ["{}" [":src" [":cljs-main" "resources"]]]]]
                                         ["script" ["{}" [":src" [":main" "resources"]]]]]]]],
                          "icon-url" ["def" "icon-url" "|http://repo.cirru.org/logo.cirru.org/cirru-400x400.png"]},
                   :procs [["main!"]]},
         "modifier.tree" {:ns ["ns" "cirru-editor.modifier.tree"],
                          :defs {"before-token" ["defn"
                                                 "before-token"
                                                 ["snapshot" "op-data"]
                                                 ["let"
                                                  [["coord" "op-data"]]
                                                  ["->"
                                                   "snapshot"
                                                   ["update-in"
                                                    ["cons" ":tree" ["butlast" "coord"]]
                                                    ["fn"
                                                     ["parent"]
                                                     ["into"
                                                      ["[]"]
                                                      ["let"
                                                       [["position" ["last" "coord"]]]
                                                       ["cond"
                                                        [["zero?" "position"] ["cons" "|" "parent"]]
                                                        [":else"
                                                         ["concat"
                                                          ["subvec" "parent" "0" "position"]
                                                          ["[]" "|"]
                                                          ["subvec" "parent" "position"]]]]]]]]]]],
                                 "duplicate-expression" ["defn"
                                                         "duplicate-expression"
                                                         ["snapshot" "op-data"]
                                                         ["let"
                                                          [["focus" [":focus" "snapshot"]]]
                                                          ["if"
                                                           ["empty?" "focus"]
                                                           "snapshot"
                                                           ["->"
                                                            "snapshot"
                                                            ["update"
                                                             ":focus"
                                                             ["fn"
                                                              ["focus"]
                                                              ["if"
                                                               ["=" "1" ["count" "focus"]]
                                                               ["[]" ["inc" ["first" "focus"]]]
                                                               ["conj"
                                                                ["into" ["[]"] ["butlast" "focus"]]
                                                                ["inc" ["last" "focus"]]]]]]
                                                            ["update"
                                                             ":tree"
                                                             ["fn"
                                                              ["tree"]
                                                              ["if"
                                                               ["=" "1" ["count" "focus"]]
                                                               ["let"
                                                                [["pos" ["first" "focus"]]]
                                                                ["into"
                                                                 ["[]"]
                                                                 ["concat"
                                                                  ["subvec" "tree" "0" ["inc" "pos"]]
                                                                  ["subvec" "tree" "pos"]]]]
                                                               ["update-in"
                                                                "tree"
                                                                ["butlast" "focus"]
                                                                ["fn"
                                                                 ["parent"]
                                                                 ["let"
                                                                  [["pos" ["last" "focus"]]]
                                                                  ["into"
                                                                   ["[]"]
                                                                   ["concat"
                                                                    ["subvec" "parent" "0" ["inc" "pos"]]
                                                                    ["subvec" "parent" "pos"]]]]]]]]]]]]],
                                 "after-expression" ["defn"
                                                     "after-expression"
                                                     ["snapshot" "op-data"]
                                                     ["let"
                                                      [["coord" "op-data"]]
                                                      ["if"
                                                       ["pos?" ["count" "coord"]]
                                                       ["->"
                                                        "snapshot"
                                                        ["update-in"
                                                         ["cons" ":tree" ["butlast" "coord"]]
                                                         ["fn"
                                                          ["parent"]
                                                          ["let"
                                                           [["position" ["last" "coord"]]]
                                                           ["into"
                                                            ["[]"]
                                                            ["cond"
                                                             [["=" "position" ["dec" ["count" "parent"]]]
                                                              ["conj" "parent" ["[]" "|"]]]
                                                             [":else"
                                                              ["concat"
                                                               ["subvec" "parent" "0" ["inc" "position"]]
                                                               ["[]" ["[]" "|"]]
                                                               ["subvec" "parent" ["inc" "position"]]]]]]]]]
                                                        ["update"
                                                         ":focus"
                                                         ["fn"
                                                          ["focus"]
                                                          ["conj"
                                                           ["into" ["[]"] ["butlast" "focus"]]
                                                           ["inc" ["last" "focus"]]
                                                           "0"]]]]
                                                       ["if"
                                                        ["=" [":tree" "snapshot"] ["[]"]]
                                                        ["->"
                                                         "snapshot"
                                                         ["assoc" ":focus" ["[]" "0"]]
                                                         ["assoc" ":tree" ["[]" "|"]]]
                                                        "snapshot"]]]],
                                 "fold-node" ["defn"
                                              "fold-node"
                                              ["snapshot" "op-data"]
                                              ["let"
                                               [["coord" "op-data"]]
                                               ["->"
                                                "snapshot"
                                                ["update-in" ["cons" ":tree" "coord"] ["fn" ["node"] ["[]" "node"]]]
                                                ["update" ":focus" ["fn" ["coord"] ["conj" "coord" "0"]]]]]],
                                 "unfold-expression" ["defn"
                                                      "unfold-expression"
                                                      ["snapshot" "op-data"]
                                                      ["let"
                                                       [["coord" "op-data"]]
                                                       ["cond"
                                                        [[">" ["count" "coord"] "1"]
                                                         ["->"
                                                          "snapshot"
                                                          ["update"
                                                           ":tree"
                                                           ["fn"
                                                            ["tree"]
                                                            ["let"
                                                             [["expression" ["get-in" "tree" "coord"]]
                                                              ["position" ["last" "coord"]]]
                                                             ["update-in"
                                                              "tree"
                                                              ["butlast" "coord"]
                                                              ["fn"
                                                               ["parent"]
                                                               ["into"
                                                                ["[]"]
                                                                ["cond"
                                                                 [["zero?" "position"]
                                                                  ["concat" "expression" ["rest" "parent"]]]
                                                                 [["=" "position" ["dec" ["count" "parent"]]]
                                                                  ["concat" ["butlast" "parent"] "expression"]]
                                                                 [":else"
                                                                  ["concat"
                                                                   ["subvec" "parent" "0" "position"]
                                                                   "expression"
                                                                   ["subvec" "parent" ["inc" "position"]]]]]]]]]]]
                                                          ["update"
                                                           ":focus"
                                                           ["fn" ["focus"] ["into" ["[]"] ["butlast" "focus"]]]]]]
                                                        [["=" "1" ["count" "coord"]]
                                                         ["->"
                                                          "snapshot"
                                                          ["update"
                                                           ":tree"
                                                           ["fn"
                                                            ["parent"]
                                                            ["let"
                                                             [["expression" ["get-in" "parent" "coord"]]
                                                              ["position" ["last" "coord"]]]
                                                             ["into"
                                                              ["[]"]
                                                              ["cond"
                                                               [["zero?" "position"]
                                                                ["concat" "expression" ["rest" "parent"]]]
                                                               [["=" "position" ["dec" ["count" "parent"]]]
                                                                ["concat" ["butlast" "parent"] "expression"]]
                                                               [":else"
                                                                ["concat"
                                                                 ["subvec" "parent" "0" "position"]
                                                                 "expression"
                                                                 ["subvec" "parent" ["inc" "position"]]]]]]]]]]]
                                                        [":else" "snapshot"]]]],
                                 "tree-reset" ["defn"
                                               "tree-reset"
                                               ["snapshot" "op-data"]
                                               ["let"
                                                [["tree" "op-data"]]
                                                ["->" "snapshot" ["assoc" ":tree" "tree"] ["assoc" ":focus" ["[]"]]]]],
                                 "before-expression" ["defn"
                                                      "before-expression"
                                                      ["snapshot" "op-data"]
                                                      ["let"
                                                       [["coord" "op-data"]]
                                                       ["->"
                                                        "snapshot"
                                                        ["update-in"
                                                         ["cons" ":tree" ["butlast" "coord"]]
                                                         ["fn"
                                                          ["parent"]
                                                          ["let"
                                                           [["position" ["last" "coord"]]]
                                                           ["into"
                                                            ["[]"]
                                                            ["cond"
                                                             [["zero?" "position"] ["cons" ["[]" "|"] "parent"]]
                                                             [":else"
                                                              ["concat"
                                                               ["subvec" "parent" "0" "position"]
                                                               ["[]" ["[]" "|"]]
                                                               ["subvec" "parent" "position"]]]]]]]]
                                                        ["update" ":focus" ["fn" ["focus"] ["conj" "focus" "0"]]]]]],
                                 "append-expression" ["defn"
                                                      "append-expression"
                                                      ["snapshot" "op-data"]
                                                      ["let"
                                                       [["coord" "op-data"]
                                                        ["expression" ["get-in" "snapshot" ["cons" ":tree" "coord"]]]]
                                                       ["->"
                                                        "snapshot"
                                                        ["update-in"
                                                         ["cons" ":tree" "coord"]
                                                         ["fn" ["parent"] ["conj" "parent" "|"]]]
                                                        ["update"
                                                         ":focus"
                                                         ["fn" ["focus"] ["conj" "focus" ["count" "expression"]]]]]]],
                                 "remove-node" ["defn"
                                                "remove-node"
                                                ["snapshot" "op-data"]
                                                ["let"
                                                 [["coord" "op-data"]]
                                                 ["if"
                                                  ["pos?" ["count" "coord"]]
                                                  ["->"
                                                   "snapshot"
                                                   ["update-in"
                                                    ["cons" ":tree" ["butlast" "coord"]]
                                                    ["fn"
                                                     ["parent"]
                                                     ["let"
                                                      [["position" ["last" "coord"]]]
                                                      ["into"
                                                       ["[]"]
                                                       ["cond"
                                                        [["=" "1" ["count" "parent"]] ["[]"]]
                                                        [["zero?" "position"] ["rest" "parent"]]
                                                        [["=" "position" ["dec" ["count" "parent"]]]
                                                         ["butlast" "parent"]]
                                                        [":else"
                                                         ["concat"
                                                          ["subvec" "parent" "0" "position"]
                                                          ["subvec" "parent" ["inc" "position"]]]]]]]]]
                                                   ["update"
                                                    ":focus"
                                                    ["fn"
                                                     ["focus"]
                                                     ["into"
                                                      ["[]"]
                                                      ["let"
                                                       [["position" ["last" "focus"]]]
                                                       ["if"
                                                        ["zero?" "position"]
                                                        ["butlast" "focus"]
                                                        ["concat" ["butlast" "focus"] ["[]" ["dec" "position"]]]]]]]]]
                                                  "snapshot"]]],
                                 "unfold-token" ["defn"
                                                 "unfold-token"
                                                 ["snapshot" "op-data"]
                                                 ["let"
                                                  [["tree" [":tree" "snapshot"]] ["focus" [":focus" "snapshot"]]]
                                                  ["if"
                                                   ["empty?" "focus"]
                                                   "snapshot"
                                                   ["let"
                                                    [["parent-coord" ["butlast" "focus"]]
                                                     ["parent" ["get-in" "tree" "parent-coord"]]]
                                                    ["if"
                                                     ["=" ["count" "parent"] "1"]
                                                     ["->"
                                                      "snapshot"
                                                      ["update-in" ["cons" ":tree" "parent-coord"] "first"]
                                                      ["assoc" ":focus" "parent-coord"]]
                                                     "snapshot"]]]]],
                                 "after-token" ["defn"
                                                "after-token"
                                                ["snapshot" "op-data"]
                                                ["let"
                                                 [["coord" "op-data"]]
                                                 ["if"
                                                  [">" ["count" "coord"] "0"]
                                                  ["->"
                                                   "snapshot"
                                                   ["update-in"
                                                    ["cons" ":tree" ["butlast" "coord"]]
                                                    ["fn"
                                                     ["expression"]
                                                     ["if"
                                                      ["=" ["last" "coord"] ["dec" ["count" "expression"]]]
                                                      ["conj" "expression" "|"]
                                                      ["into"
                                                       ["[]"]
                                                       ["concat"
                                                        ["subvec" "expression" "0" ["inc" ["last" "coord"]]]
                                                        ["[]" "|"]
                                                        ["subvec" "expression" ["inc" ["last" "coord"]]]]]]]]
                                                   ["update"
                                                    ":focus"
                                                    ["fn"
                                                     ["coord"]
                                                     ["conj"
                                                      ["into" ["[]"] ["butlast" "coord"]]
                                                      ["inc" ["last" "coord"]]]]]]
                                                  ["if"
                                                   ["=" [":tree" "snapshot"] ["[]"]]
                                                   ["->"
                                                    "snapshot"
                                                    ["assoc" ":focus" ["[]" "0"]]
                                                    ["assoc" ":tree" ["[]" "|"]]]
                                                   "snapshot"]]]],
                                 "prepend-expression" ["defn"
                                                       "prepend-expression"
                                                       ["snapshot" "op-data"]
                                                       ["let"
                                                        [["coord" "op-data"]]
                                                        ["->"
                                                         "snapshot"
                                                         ["update-in"
                                                          ["cons" ":tree" "coord"]
                                                          ["fn" ["parent"] ["into" ["[]"] ["cons" "|" "parent"]]]]
                                                         ["update" ":focus" ["fn" ["focus"] ["conj" "focus" "0"]]]]]],
                                 "update-token" ["defn"
                                                 "update-token"
                                                 ["snapshot" "op-data"]
                                                 ["let"
                                                  [[["[]" "coord" "new-token"] "op-data"]]
                                                  ["->" "snapshot" ["assoc-in" ["cons" ":tree" "coord"] "new-token"]]]]},
                          :procs []},
         "modifier.command" {:ns ["ns" "cirru-editor.modifier.command"],
                             :defs {"paste" ["defn"
                                             "paste"
                                             ["snapshot" "op-data"]
                                             ["let"
                                              [["coord" "op-data"]]
                                              ["->"
                                               "snapshot"
                                               ["assoc-in" ["cons" ":tree" "coord"] [":clipboard" "snapshot"]]]]],
                                    "copy" ["defn"
                                            "copy"
                                            ["snapshot" "op-data"]
                                            ["let"
                                             [["coord" "op-data"]
                                              ["expression" ["get-in" "snapshot" ["cons" ":tree" "coord"]]]]
                                             ["->" "snapshot" ["assoc" ":clipboard" "expression"]]]],
                                    "cut" ["defn"
                                           "cut"
                                           ["snapshot" "op-data"]
                                           ["let"
                                            [["coord" "op-data"]
                                             ["expression" ["get-in" "snapshot" ["cons" ":tree" "coord"]]]
                                             ["position" ["last" "coord"]]]
                                            ["->"
                                             "snapshot"
                                             ["update-in"
                                              ["cons" ":tree" ["butlast" "coord"]]
                                              ["fn"
                                               ["parent"]
                                               ["if" ["zero?" "position"] ["[]"] ["subvec" "parent" "1"]]
                                               ["cond"
                                                [["=" "1" ["count" "parent"]] ["[]"]]
                                                [["zero?" "position"] ["subvec" "parent" "1"]]
                                                [["=" "position" ["dec" ["count" "parent"]]]
                                                 ["into" ["[]"] ["butlast" "parent"]]]
                                                [":else"
                                                 ["into"
                                                  ["[]"]
                                                  ["concat"
                                                   ["subvec" "parent" "0" "position"]
                                                   ["subvec" "parent" ["inc" "position"]]]]]]]]
                                             ["update"
                                              ":focus"
                                              ["fn"
                                               ["focus"]
                                               ["if"
                                                ["zero?" "position"]
                                                ["into" ["[]"] ["butlast" "coord"]]
                                                ["conj" ["into" ["[]"] ["butlast" "coord"]] ["dec" "position"]]]]]
                                             ["assoc" ":clipboard" "expression"]]]]},
                             :procs []},
         "modifier.focus" {:ns ["ns" "cirru-editor.modifier.focus"],
                           :defs {"node-right" ["defn"
                                                "node-right"
                                                ["snapshot" "op-data"]
                                                ["->"
                                                 "snapshot"
                                                 ["update"
                                                  ":focus"
                                                  ["fn"
                                                   ["focus"]
                                                   ["let"
                                                    [["position" ["last" "focus"]]
                                                     ["parent"
                                                      ["get-in" "snapshot" ["cons" ":tree" ["butlast" "focus"]]]]]
                                                    ["conj"
                                                     ["into" ["[]"] ["butlast" "focus"]]
                                                     ["if"
                                                      ["<" "position" ["dec" ["count" "parent"]]]
                                                      ["inc" "position"]
                                                      "position"]]]]]]],
                                  "focus-to" ["defn"
                                              "focus-to"
                                              ["snapshot" "op-data"]
                                              ["let" [["coord" "op-data"]] ["assoc" "snapshot" ":focus" "coord"]]],
                                  "node-up" ["defn"
                                             "node-up"
                                             ["snapshot" "op-data"]
                                             ["->"
                                              "snapshot"
                                              ["update"
                                               ":focus"
                                               ["fn"
                                                ["focus"]
                                                ["if"
                                                 ["pos?" ["count" "focus"]]
                                                 ["subvec" "focus" "0" ["dec" ["count" "focus"]]]
                                                 "focus"]]]]],
                                  "node-left" ["defn"
                                               "node-left"
                                               ["snapshot" "op-data"]
                                               ["->"
                                                "snapshot"
                                                ["update"
                                                 ":focus"
                                                 ["fn"
                                                  ["focus"]
                                                  ["let"
                                                   [["position" ["last" "focus"]]]
                                                   ["conj"
                                                    ["into" ["[]"] ["butlast" "focus"]]
                                                    ["if" ["pos?" "position"] ["dec" "position"] "position"]]]]]]],
                                  "expression-down" ["defn"
                                                     "expression-down"
                                                     ["snapshot" "op-data"]
                                                     ["let"
                                                      [["coord" "op-data"]
                                                       ["expression" ["get-in" "snapshot" ["cons" ":tree" "coord"]]]]
                                                      ["->"
                                                       "snapshot"
                                                       ["update"
                                                        ":focus"
                                                        ["fn"
                                                         ["focus"]
                                                         ["if"
                                                          ["pos?" ["count" "expression"]]
                                                          ["conj" "focus" "0"]
                                                          "focus"]]]]]]},
                           :procs []},
         "util.detect" {:ns ["ns"
                             "cirru-editor.util.detect"
                             [":require" ["[]" "clojure.string" ":refer" ["[]" "includes?"]]]],
                        :defs {"has-blank?" ["defn" "has-blank?" ["x"] ["includes?" "x" "| "]],
                               "coord-contains?" ["defn"
                                                  "coord-contains?"
                                                  ["a" "b"]
                                                  ["if"
                                                   ["nil?" "a"]
                                                   "false"
                                                   ["if"
                                                    ["empty?" "b"]
                                                    "true"
                                                    ["if"
                                                     ["empty?" "a"]
                                                     "false"
                                                     ["if"
                                                      ["=" ["first" "a"] ["first" "b"]]
                                                      ["recur" ["rest" "a"] ["rest" "b"]]
                                                      "false"]]]]],
                               "deep?" ["defn"
                                        "deep?"
                                        ["expression"]
                                        ["some" ["fn" ["item"] ["vector?" "item"]] "expression"]],
                               "shallow?" ["defn"
                                           "shallow?"
                                           ["expression"]
                                           ["every?" ["fn" ["item"] ["string?" "item"]] "expression"]]},
                        :procs []},
         "modifier.core" {:ns ["ns"
                               "cirru-editor.modifier.core"
                               [":require"
                                ["[]" "cirru-editor.modifier.tree" ":as" "tree"]
                                ["[]" "cirru-editor.modifier.focus" ":as" "focus"]
                                ["[]" "cirru-editor.modifier.command" ":as" "command"]]],
                          :defs {"default-handler" ["defn" "default-handler" ["snapshot" "op-data"] "snapshot"],
                                 "updater" ["defn"
                                            "updater"
                                            ["snapshot" "op" "op-data"]
                                            ["--" "println" ":update-state" "op" "op-data"]
                                            ["let"
                                             [["handler"
                                               ["case"
                                                "op"
                                                [":update-token" "tree/update-token"]
                                                [":after-token" "tree/after-token"]
                                                [":fold-node" "tree/fold-node"]
                                                [":unfold-expression" "tree/unfold-expression"]
                                                [":unfold-token" "tree/unfold-token"]
                                                [":before-expression" "tree/before-expression"]
                                                [":after-expression" "tree/after-expression"]
                                                [":prepend-expression" "tree/prepend-expression"]
                                                [":append-expression" "tree/append-expression"]
                                                [":before-token" "tree/before-token"]
                                                [":remove-node" "tree/remove-node"]
                                                [":focus-to" "focus/focus-to"]
                                                [":node-up" "focus/node-up"]
                                                [":expression-down" "focus/expression-down"]
                                                [":node-left" "focus/node-left"]
                                                [":node-right" "focus/node-right"]
                                                [":command-copy" "command/copy"]
                                                [":command-cut" "command/cut"]
                                                [":command-paste" "command/paste"]
                                                [":tree-reset" "tree/tree-reset"]
                                                [":duplicate-expression" "tree/duplicate-expression"]
                                                "default-handler"]]]
                                             ["handler" "snapshot" "op-data"]]]},
                          :procs []},
         "util.measure" {:ns ["ns" "cirru-editor.util.measure"],
                         :defs {"text-width" ["defn"
                                              "text-width"
                                              ["content" "font-size" "font-family"]
                                              ["if"
                                               ["some?" "ctx"]
                                               ["do"
                                                ["set!" [".-font" "ctx"] ["str" "font-size" "|px " "font-family"]]
                                                [".-width" [".measureText" "ctx" "content"]]]
                                               ["+" "4" ["*" ["count" "content"] "9"]]]],
                                "ctx" ["defonce"
                                       "ctx"
                                       ["if"
                                        ["exists?" "js/document"]
                                        [".getContext" [".createElement" "js/document" "|canvas"] "|2d"]
                                        "nil"]]},
                         :procs []}}}
